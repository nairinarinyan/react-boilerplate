#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const Svgo = require('svgo');
const svgson = require('svgson');
const format = require('xml-formatter');
const { compose } = require('lodash/fp');

const [,,source, iconName, ...args] = process.argv;
const iconDefinitionsFile = path.resolve('../src/shared/components/icons/icon-definitions.svg');

const keepColorsArg = '--keepColors';
const stripColors = !args.includes(keepColorsArg);

const svgOptions = {
    plugins: [
        { removeViewBox: false },
        { cleanupIDs: { prefix: iconName } },
    ]
};

if (stripColors) {
    svgOptions.plugins.push(
        { convertColors: { currentColor: true } }
    );
}

const svgo = new Svgo(svgOptions);

async function optimizeSvg(sourcePath) {
    const icon = fs.readFileSync(path.resolve(sourcePath)).toString();
    return svgo.optimize(icon);
}

async function replaceSvgWithSymbol(optimizedSvgPromise) {
    const optimizedSvg = await optimizedSvgPromise;
    const parsedSvg = await svgson.parse(optimizedSvg.data);
    const transformedSvg = JSON.parse(JSON.stringify(parsedSvg));

    transformedSvg.name = 'symbol';
    transformedSvg.attributes = {
        id: iconName,
        viewBox: parsedSvg.attributes.viewBox
    };

    return transformedSvg;
}

async function writeTransformedSvg(transformedSvgPromise) {
    const transformedSvg = await transformedSvgPromise;
    const iconDefinitions = fs.readFileSync(iconDefinitionsFile).toString();
    const parsedDefinitions = await svgson.parse(iconDefinitions);

    parsedDefinitions.children.push(transformedSvg);

    const iconDefinitionsString = svgson.stringify(parsedDefinitions);
    fs.writeFileSync(iconDefinitionsFile, format(iconDefinitionsString));
}

const processSvg = compose(writeTransformedSvg, replaceSvgWithSymbol, optimizeSvg);
processSvg(source);